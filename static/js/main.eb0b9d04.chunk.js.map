{"version":3,"sources":["hooks/storeHooks.ts","services/helpers.ts","store/selectors.ts","components/common/Loader.tsx","hooks/useActions.ts","services/api/API.ts","store/commonActions/appActions.ts","services/localStorage/getLocalStorage.ts","services/countProfit.ts","store/reducers/portfolioReducer.ts","components/Portfolio.tsx","components/Header.tsx","components/Cryptocurrencies.tsx","components/common/ModalTransaction.tsx","components/Currency.tsx","App.tsx","reportWebVitals.ts","store/reducers/appReducer.ts","store/store.ts","services/localStorage/saveLocalStorage.ts","index.tsx"],"names":["useTypedSelector","useSelector","returnToFixed","value","digits","Number","toFixed","temp","reduceValue","arr","length","reduce","acc","cur","checkCost","cost","format","profit","symbol","toString","slice","selectPortfolio","state","portfolio","selectTotalProfit","createDraftSafeSelector","map","coin","totalValue","selectAllIds","id","join","selectApp","app","Loader","className","useActions","actions","dispatch","useDispatch","useMemo","bindActionCreators","instance","axios","create","baseURL","headers","coinsApi","get","then","res","data","setAppStatus","createAction","setAppError","getLocalStorage","name","window","storage","localStorage","getItem","JSON","parse","calculationOfProfit","transaction","quote","USD","price","percent_change_24h","numberOfCoins","tr","coins","percentage","changes24h","changes","getCoins","createAsyncThunk","arg","a","rejectWithValue","status","Error","message","error","getCoinsById","updateDataFromLS","localState","transactions","createSlice","initialState","reducers","setCoinToState","action","defaultProfit","payload","push","deleteCoin","filter","addTransaction","uuid","deleteTransaction","elem","trans","extraReducers","builder","addCase","fulfilled","reducer","portfolioActions","confirm","Modal","Portfolio","ids","useEffect","timeId","setInterval","clearInterval","gutter","justify","placement","color","title","span","type","icon","CloseOutlined","onClick","ExclamationCircleOutlined","content","onOk","onCancel","console","log","to","src","prefix","xs","sm","lg","shape","PlusOutlined","memo","Text","Typography","Header","location","useLocation","useState","pathname","isHome","setIsHome","totalBalance","HomeOutlined","Cryptocurrencies","filteredCoins","setFilteredCoins","filtered","hasCoin","some","addCoin","ModalTransaction","visible","onCreate","Form","useForm","form","okText","cancelText","validateFields","values","resetFields","catch","info","layout","initialValues","modifier","Item","label","rules","required","pattern","RegExp","placeholder","Title","Currency","setVisible","tokenName","useParams","asset","current","selectCurrency","level","tran","suffix","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","appReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","concat","thunk","oldTimeStamp","Date","now","valueOf","updateLocalStorage","newState","serializedState","stringify","setItem","e","saveState","subscribe","getState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb0b9d04.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport {AppDispatch, RootState} from \"../store/store\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()","export const returnToFixed = (value: number | string, digits: number): number => {\r\n    if (typeof value === 'number') {\r\n        return value > 1 ? Number(value.toFixed(digits)) : Number(value.toFixed(digits + 1))\r\n    } else {\r\n        const temp = Number(value)\r\n        return temp > 1 ? Number(temp.toFixed(digits)) : Number(temp.toFixed(digits + 1))\r\n    }\r\n}\r\n\r\nexport const reduceValue = (arr: Array<number>) => {\r\n    if (arr.length === 0) return 0\r\n\r\n    return arr.reduce((acc, cur) => acc + cur, 0)\r\n}\r\n\r\nexport const checkCost = (value: number, cost: number) => {\r\n    if (cost === 0) return cost;\r\n    const division = value / cost;\r\n\r\n    return (division - 1) * 100;\r\n};\r\n\r\nexport const format = (profit: number,symbol: string) => {\r\n    if (profit < 0) {\r\n        return `-${symbol}${returnToFixed(profit,2).toString().slice(1, 6)}`;\r\n    }\r\n    if (profit > 0) {\r\n        return `+${symbol}${returnToFixed(profit,2)}`;\r\n    }\r\n\r\n    return `${symbol}${returnToFixed(profit,2)}`;\r\n};","import {RootState} from \"./store\";\r\nimport {CryptoCurrencyListing} from \"../services/types\";\r\nimport {createDraftSafeSelector} from \"@reduxjs/toolkit\";\r\nimport {reduceValue, returnToFixed} from \"../services/helpers\";\r\n\r\nexport const selectPortfolio = (state: RootState) => state.portfolio\r\n// return of the sum of all assets\r\nexport const selectTotalProfit = createDraftSafeSelector(\r\n    selectPortfolio, (state) =>  {\r\n        if (state.portfolio.length) {\r\n            return returnToFixed(reduceValue(state.portfolio.map(coin => coin.profit.totalValue)),4)\r\n        } else {\r\n            return 0\r\n        }\r\n    }\r\n)\r\n\r\n// return all ids from portfolio as string \"1,2,224\"\r\nexport const selectAllIds  = createDraftSafeSelector(\r\n    selectPortfolio, (state) =>  {\r\n        if (state.portfolio.length) {\r\n            return state.portfolio.map(coin => coin.id).join(',')\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n)\r\n//TODO need refactoring #3 - selectCurrency\r\nexport const selectCurrency = (state: RootState, coin: string): CryptoCurrencyListing[] => {\r\n    return state.portfolio.portfolio.filter(current => current.name === coin);\r\n}\r\nexport const selectApp = (state: RootState) => state.app","import React from 'react';\r\nimport { Spin } from 'antd';\r\n\r\nconst Loader = () => (\r\n    <div className=\"loader\">\r\n        <Spin />\r\n    </div>\r\n);\r\n\r\nexport default Loader;","import { ActionCreatorsMapObject, bindActionCreators } from \"redux\";\r\nimport { useMemo } from \"react\";\r\nimport {useAppDispatch} from \"./storeHooks\";\r\n\r\n// создаем hook, который связывает все commonActions creators с диспатчем\r\n// нам больше не понядобиться использование диспатча в комоненте, просто будем вызывать функцию\r\nexport const useActions = <T extends ActionCreatorsMapObject>(actions: T) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [dispatch, actions])\r\n}","import axios from 'axios'\r\nimport {ResponseCoinsType} from \"../types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://pro-api.coinmarketcap.com/v1/cryptocurrency',\r\n    headers: {\r\n        'X-CMC_PRO_API_KEY': \"b4dd5499-4837-4d1b-85c5-11d968b0af88\",\r\n        'Access-Control-Allow-Origin': '*',\r\n        // 'Access-Control-Allow-Methods': 'GET',\r\n    }\r\n})\r\n\r\nexport const coinsApi = {\r\n    getCoins() {\r\n        return instance.get<ResponseCoinsType>(`/listings/latest`)\r\n            .then(res => res.data)\r\n    },\r\n    getCurrentPrice(id: string) {\r\n        return instance.get<ResponseCoinsType>(`/quotes/latest?id=${id}`)\r\n            .then(res => res.data)\r\n    },\r\n}","import {createAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const setAppStatus = createAction<{ status: RequestStatusType }>('app/setAppStatus')\r\nexport const setAppError = createAction<{ error: string | null }>('app/setAppError')\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import {CryptoCurrencyListing} from \"../types\";\r\n\r\nexport const getLocalStorage = (name: string): CryptoCurrencyListing[] => {\r\n    if (typeof window !== 'undefined') {\r\n        const storage = window.localStorage.getItem(name);\r\n\r\n        return  storage === null ? [] as CryptoCurrencyListing[] : JSON.parse(storage);\r\n    }\r\n\r\n    return [] as CryptoCurrencyListing[]\r\n};\r\n","import {CryptoCurrencyListing, QuoteType, TransactionType} from \"./types\";\r\nimport {checkCost, format, reduceValue, returnToFixed} from \"./helpers\";\r\n\r\nexport const countProfit = (coins: CryptoCurrencyListing[]) => {\r\n    return coins.map((coin) =>\r\n        ({...coin, profit: calculationOfProfit(coin.transactions, coin.quote, coin.id)})\r\n    );\r\n}\r\n\r\nconst calculationOfProfit = (\r\n    transaction: TransactionType[],\r\n    quote: QuoteType,\r\n    id: number\r\n) => {\r\n    const {price, percent_change_24h} = quote.USD\r\n    const numberOfCoins = reduceValue(transaction.map((tr) => +tr.coins));\r\n    const totalValue = returnToFixed(reduceValue(transaction.map(tr => +tr.coins * price)),2);\r\n    const cost = reduceValue(transaction.map(tr => +tr.coins * +tr.cost));\r\n    const profit = format(totalValue - cost, '$');\r\n    const percentage = format(checkCost(totalValue, cost), '');\r\n    const changes24h = percent_change_24h;\r\n    const changes = checkCost(totalValue, cost) >= 0;\r\n\r\n    return {\r\n        id,\r\n        numberOfCoins,\r\n        totalValue,\r\n        cost,\r\n        profit,\r\n        percentage,\r\n        changes24h,\r\n        price,\r\n        changes,\r\n    };\r\n};\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {CryptoCurrencyListing} from \"../../services/types\";\r\nimport {coinsApi} from \"../../services/api/API\";\r\nimport {setAppError, setAppStatus} from \"../commonActions/appActions\";\r\nimport {v4 as uuid} from 'uuid';\r\nimport {getLocalStorage} from \"../../services/localStorage/getLocalStorage\";\r\nimport {countProfit} from \"../../services/countProfit\";\r\n\r\nconst getCoins = createAsyncThunk('portfolio/getCoins',\r\n    async (arg, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await coinsApi.getCoins()\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return res.data;\r\n        } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n                const {message} = error as Error\r\n                dispatch(setAppStatus({status: 'failed'}))\r\n                dispatch(setAppError({error: message}))\r\n            }\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nconst getCoinsById = createAsyncThunk('portfolio/getCoinsById',\r\n    async (id: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await coinsApi.getCurrentPrice(id)\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return res.data;\r\n        } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n                const {message} = error as Error\r\n                dispatch(setAppStatus({status: 'failed'}))\r\n                dispatch(setAppError({error: message}))\r\n            }\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nconst updateDataFromLS = createAsyncThunk('portfolio/updateDataFromLS',\r\n    async (arg, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const localState = getLocalStorage('portfolio')\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            //countProfit - function that calculates all coins, profits, changes and packs into an object\r\n            return countProfit(localState)\r\n        } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n                const {message} = error as Error\r\n                dispatch(setAppStatus({status: 'failed'}))\r\n                dispatch(setAppError({error: message}))\r\n            }\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nconst initialState = {\r\n    portfolio: [] as CryptoCurrencyListing[],\r\n    coins: [] as CryptoCurrencyListing[]\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"portfolio\",\r\n    initialState,\r\n    reducers: {\r\n        setCoinToState: (state, action: PayloadAction<CryptoCurrencyListing>) => {\r\n            const defaultProfit = {\r\n                id: action.payload.id,\r\n                numberOfCoins: 0,\r\n                totalValue: 0,\r\n                cost: 0,\r\n                profit: '',\r\n                percentage: '',\r\n                changes24h: 0,\r\n                price: 0,\r\n                changes: true,\r\n            };\r\n            state.portfolio.push({...action.payload, transactions: [], profit: defaultProfit})\r\n        },\r\n        deleteCoin: (state, action: PayloadAction<{ id: number }>) => {\r\n            state.portfolio = state.portfolio.filter(coin => coin.id !== action.payload.id)\r\n        },\r\n        addTransaction: (state, action: PayloadAction<{ id: number, cost: number, coins: number }>) => {\r\n            state.portfolio = state.portfolio.map(coin => coin.id === action.payload.id ?\r\n                {...coin, transactions: [...coin.transactions, {...action.payload, uuid: uuid()}]} : coin)\r\n        },\r\n        deleteTransaction: (state, action: PayloadAction<{ uuid: string, id: number }>) => {\r\n            state.portfolio = state.portfolio.map((elem) => ({\r\n                ...elem, transactions: elem.transactions.filter(\r\n                    (trans) => trans.uuid !== action.payload.uuid),\r\n            }));\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(getCoins.fulfilled, (state, action) => {\r\n            state.coins = action.payload.map(coin => coin)\r\n        });\r\n        builder.addCase(getCoinsById.fulfilled, (state, action) => {\r\n            state.portfolio = state.portfolio.map(coin => ({...action.payload[coin.id], transactions: coin.transactions, profit: coin.profit}))\r\n        });\r\n        builder.addCase(updateDataFromLS.fulfilled, (state, action) => {\r\n            state.portfolio = action.payload\r\n        })\r\n    }\r\n})\r\n\r\nexport const portfolio = slice.reducer;\r\nexport const {setCoinToState, deleteCoin, addTransaction, deleteTransaction} = slice.actions\r\n\r\nexport const portfolioActions = {\r\n    getCoins,\r\n    getCoinsById,\r\n    updateDataFromLS,\r\n    setCoinToState,\r\n    deleteCoin,\r\n    addTransaction,\r\n    deleteTransaction\r\n}\r\n","import React, {memo, useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Avatar, Button, Col, Modal, Row, Statistic, Tooltip} from 'antd'\r\nimport {CloseOutlined, ExclamationCircleOutlined, PlusOutlined} from '@ant-design/icons';\r\nimport {useTypedSelector} from \"../hooks/storeHooks\";\r\nimport {selectAllIds, selectApp, selectPortfolio} from \"../store/selectors\";\r\nimport Loader from \"./common/Loader\";\r\nimport {returnToFixed} from \"../services/helpers\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport {portfolioActions} from \"../store/reducers/portfolioReducer\";\r\n\r\nconst {confirm} = Modal;\r\nconst defaultImage = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRnCL1sMQf-CBs21lUpMRnEqduXQW_-lt49iA&usqp=CAU'\r\n\r\nconst Portfolio = () => {\r\n    //use selectors\r\n    const {portfolio} = useTypedSelector(selectPortfolio)\r\n    const ids = useTypedSelector(selectAllIds)\r\n    const {status} = useTypedSelector(selectApp)\r\n    //use actions\r\n    const {deleteCoin, getCoinsById, updateDataFromLS} = useActions(portfolioActions)\r\n\r\n    useEffect(() => {\r\n        let timeId: NodeJS.Timeout;\r\n        if (ids) {\r\n            const update = () => {\r\n                getCoinsById(ids)\r\n                updateDataFromLS()\r\n            }\r\n            timeId = setInterval(() => {\r\n                update()\r\n            }, 60000);\r\n        }\r\n\r\n        return () => clearInterval(timeId);\r\n    }, [ids])\r\n\r\n    function showConfirm(id: number) {\r\n        confirm({\r\n            title: 'Do you Want to delete these item?',\r\n            icon: <ExclamationCircleOutlined/>,\r\n            content: 'All crypto assets will be deleted',\r\n            onOk() {\r\n                deleteCoin({id});\r\n            },\r\n            onCancel() {\r\n                console.log('Cancel');\r\n            },\r\n        });\r\n    }\r\n    if (status === 'loading' && ids === null) return <Loader/>\r\n\r\n    return (\r\n        <section className=\"portfolio\">\r\n            <div className=\"top-bound\"/>\r\n            <div className=\"portfolio-container\">\r\n                <Row gutter={[0, 16]} justify={\"space-between\"} className=\"portfolio-overview\">\r\n                    {portfolio.map(coin => (\r\n                        <Tooltip key={coin.id} placement=\"top\" color=\"blue\" title=\"Click to watch more info\">\r\n                            <Col span={24}>\r\n                                <div className=\"portfolio-overview-card\">\r\n                                    <Button type=\"primary\"\r\n                                            icon={<CloseOutlined/>}\r\n                                            className=\"portfolio-overview-delete\"\r\n                                            onClick={() => showConfirm(coin.id)}\r\n                                    />\r\n                                    <Link to={`currency/${coin.name}`} className=\"portfolio-overview-link\">\r\n                                        <Avatar className=\"portfolio-overview-image\"\r\n                                                src={defaultImage}/>\r\n                                        <Statistic title={'TOTAL VALUE'}\r\n                                                   value={coin.profit.totalValue}\r\n                                                   className=\"portfolio-overview-total\"/>\r\n                                        <Statistic prefix={coin.profit.totalValue\r\n                                            ? <span className={`portfolio-overview-profit-mod \r\n                                            ${coin.profit.changes ? 'long' : 'short'}`}>{coin.profit.percentage}%</span>\r\n                                            : ''}\r\n                                                   title={'PROFIT/LOSS'}\r\n                                                   value={`${coin.profit.profit}`}\r\n                                                   className={`portfolio-overview-profit`}/>\r\n                                        <Statistic prefix={'$'}\r\n                                                   title={`${coin.profit.numberOfCoins} ${coin.symbol}`}\r\n                                                   value={returnToFixed(coin.quote.USD.price, 2)}\r\n                                                   className=\"portfolio-overview-cost\"/>\r\n                                    </Link>\r\n                                </div>\r\n\r\n                            </Col>\r\n                        </Tooltip>\r\n                    ))}\r\n                </Row>\r\n                <Row gutter={[0, 16]} className=\"portfolio-overview\">\r\n                    <Col xs={24} sm={24} lg={24} className=\"portfolio-overview-add\">\r\n                        <Link to='/cryptocurrencies'>\r\n                            <Button type=\"primary\" shape=\"circle\" icon={<PlusOutlined/>}/>\r\n                        </Link>\r\n                        <Statistic value=\"Bitcoin, Cardano, Ethereum\" title={'Add tokens'}/>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default memo(Portfolio);\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Col, Typography} from 'antd'\r\nimport {HomeOutlined, PlusOutlined} from \"@ant-design/icons\";\r\nimport {Link, useLocation} from 'react-router-dom';\r\nimport {useTypedSelector} from \"../hooks/storeHooks\";\r\nimport {selectTotalProfit} from \"../store/selectors\";\r\n\r\nconst {Text} = Typography\r\n\r\nconst Header = () => {\r\n    //The useLocation hook returns the location object that represents the current URL\r\n    const location = useLocation();\r\n    //local state\r\n    const [isHome, setIsHome] = useState<boolean>(location.pathname === '/');\r\n    //use selector\r\n    const totalBalance = useTypedSelector(selectTotalProfit);\r\n\r\n    useEffect(() => {\r\n        setIsHome(location.pathname === '/')\r\n    }, [location])\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <Col span={12} className=\"total-balance\">\r\n                <Text className=\"total-balance-text\">\r\n                    Total Balance\r\n                </Text>\r\n                <Text className=\"total-balance-count\">\r\n                    $ {totalBalance}\r\n                </Text>\r\n            </Col>\r\n            <Col span={12} className=\"add-token-control\">\r\n                {isHome ?\r\n                    <Link to=\"/cryptocurrencies\" onClick={() => setIsHome(false)}>\r\n                        <PlusOutlined/>\r\n                        <Text>Add tokens</Text>\r\n                    </Link>\r\n                    :\r\n                    <Link to=\"/\" onClick={() => setIsHome(true)}>\r\n                        <HomeOutlined />\r\n                    </Link>\r\n                }\r\n            </Col>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, {memo, useEffect, useState} from 'react';\r\nimport {Avatar, Col, Row, Statistic, Tooltip, Typography} from \"antd\";\r\nimport {portfolioActions} from \"../store/reducers/portfolioReducer\";\r\nimport {useTypedSelector} from \"../hooks/storeHooks\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport {selectApp, selectPortfolio} from \"../store/selectors\";\r\nimport Loader from \"./common/Loader\";\r\nimport {CryptoCurrencyListing} from \"../services/types\";\r\nimport {returnToFixed} from \"../services/helpers\";\r\n\r\nconst defaultImage = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRnCL1sMQf-CBs21lUpMRnEqduXQW_-lt49iA&usqp=CAU'\r\n\r\nconst Cryptocurrencies = () => {\r\n    //local state\r\n    const [filteredCoins, setFilteredCoins] = useState<CryptoCurrencyListing[]>([])\r\n    //use selectors\r\n    const {coins, portfolio} = useTypedSelector(selectPortfolio)\r\n    const {status} = useTypedSelector(selectApp)\r\n    //use actions\r\n    const {getCoins, setCoinToState} = useActions(portfolioActions)\r\n\r\n    useEffect(() => {\r\n        if (!coins.length) {\r\n            getCoins()\r\n        }\r\n    }, [coins])\r\n\r\n    useEffect(() => {\r\n        const filtered = coins.filter(hasCoin => !portfolio.some(coin => hasCoin.id === coin.id))\r\n        setFilteredCoins(filtered)\r\n    }, [coins, portfolio])\r\n\r\n    const addCoin = (coin: CryptoCurrencyListing) => {\r\n        setCoinToState(coin)\r\n    }\r\n\r\n    if ( status === 'loading') return <Loader />\r\n\r\n    return (\r\n        <section className=\"cryptocurrency\">\r\n            <Row gutter={[0, 16]} justify={\"space-between\"} className=\"cryptocurrency-overview\">\r\n                {filteredCoins.map((coin) => (\r\n                    <Tooltip key={coin.id} placement=\"top\" color=\"blue\" title=\"Click to add coin\">\r\n                        <Col xs={24} sm={24} lg={11}\r\n                             className=\"cryptocurrency-overview-card\"\r\n                             onClick={() => addCoin(coin)}\r\n                        >\r\n                            <div className=\"cryptocurrency-overview-symbol\">\r\n                                <Avatar className=\"cryptocurrency-overview-image\"\r\n                                        src={defaultImage}/>\r\n                                <Typography.Text>{coin.symbol} </Typography.Text>\r\n                                <Typography.Text>({coin.name})</Typography.Text>\r\n                            </div>\r\n                            <Statistic prefix={`${coin.quote.USD.percent_change_24h < 0 ? '' : '+'}`}\r\n                                       title={'CHANGES 24H'}\r\n                                       value={returnToFixed(coin.quote.USD.percent_change_24h,2) + '%'}\r\n                                       className={`cryptocurrency-overview-change \r\n                                       ${coin.quote.USD.percent_change_24h < 0 ? 'short' : 'long'}`}/>\r\n                            <Statistic prefix={'$'} title={'PRICE'} value={returnToFixed(coin.quote.USD.price, 2)}\r\n                                       className=\"cryptocurrency-overview-price\"/>\r\n                        </Col>\r\n                    </Tooltip>\r\n                ))}\r\n            </Row>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default memo(Cryptocurrencies);\r\n","import React, {memo} from 'react';\r\nimport {Form, Input, Modal} from 'antd'\r\n\r\ninterface Values {\r\n    coins: number;\r\n    cost: number\r\n}\r\n\r\ninterface CollectionCreateFormProps {\r\n    visible: boolean;\r\n    onCreate: (values: Values) => void;\r\n    onCancel: () => void;\r\n    title: string\r\n}\r\n\r\nconst ModalTransaction = ({visible,\r\n                              onCreate,\r\n                              onCancel, title}: CollectionCreateFormProps) => {\r\n\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Modal\r\n            visible={visible}\r\n            title={title}\r\n            okText=\"Create\"\r\n            cancelText=\"Cancel\"\r\n            onCancel={onCancel}\r\n            onOk={() => {\r\n                form\r\n                    .validateFields()\r\n                    .then(values => {\r\n                        form.resetFields();\r\n                        onCreate(values);\r\n                    })\r\n                    .catch(info => {\r\n                        console.log('Validate Failed:', info);\r\n                    });\r\n            }}\r\n        >\r\n            <Form\r\n                form={form}\r\n                layout=\"vertical\"\r\n                name=\"form_in_modal\"\r\n                initialValues={{ modifier: 'public' }}\r\n            >\r\n                <Form.Item\r\n                    name=\"coins\"\r\n                    label=\"Count of coin\"\r\n                    rules={[{ required: true, pattern: new RegExp(\"^([,|.]?[0-9])+$\"),\r\n                        message: 'Please input the count of coins' }]}\r\n                >\r\n                    <Input placeholder=\"example - 0.054\"/>\r\n                </Form.Item>\r\n                <Form.Item name=\"cost\"\r\n                           label=\"Cost of one coin\"\r\n                           rules={[{ required: true, pattern: new RegExp(\"^([,|.]?[0-9])+$\"),\r\n                               message: 'Please input the cost of coins' }]}\r\n                >\r\n                    <Input type=\"textarea\" placeholder=\"example - 45200\"/>\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default memo(ModalTransaction);\r\n","import React, {memo, useState} from 'react';\r\nimport {Redirect, useParams, Link} from 'react-router-dom';\r\nimport {Button, Card, Col, Modal, Row, Statistic, Typography} from \"antd\";\r\nimport {CloseOutlined, ExclamationCircleOutlined} from '@ant-design/icons';\r\nimport {selectCurrency} from \"../store/selectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/store\";\r\nimport {CryptoCurrencyListing} from \"../services/types\";\r\nimport ModalTransaction from \"./common/ModalTransaction\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport {portfolioActions} from \"../store/reducers/portfolioReducer\";\r\n\r\nconst {Title} = Typography\r\nconst { confirm } = Modal;\r\n\r\ninterface ParamTypes {\r\n    tokenName: string\r\n}\r\n\r\nconst Currency = () => {\r\n    //local state\r\n    const [visible, setVisible] = useState(false);\r\n    //hook useParams returns an object of key/value pairs of URL parameters.\r\n    const {tokenName} = useParams<ParamTypes>();\r\n    //use actions\r\n    const {addTransaction, deleteTransaction, updateDataFromLS} = useActions(portfolioActions);\r\n    //use Selector\r\n    const asset = useSelector<RootState, CryptoCurrencyListing[]>((state) => selectCurrency(state, tokenName));\r\n\r\n    const createTransaction = (values: {coins: number, cost: number}) => {\r\n        addTransaction({id: asset[0].id, ...values})\r\n        setVisible(false);\r\n        updateDataFromLS();\r\n    };\r\n\r\n    function showConfirm(uuid: string) {\r\n        confirm({\r\n            title: 'Do you Want to delete this item?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            onOk() {\r\n                deleteTransaction({uuid, id: asset[0].id})\r\n                updateDataFromLS();\r\n            },\r\n            onCancel() {\r\n                console.log('Cancel');\r\n            },\r\n        });\r\n    }\r\n\r\n    if (asset.length === 0) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n        <section className=\"currency\">\r\n            <Title level={4} className=\"currency-title\"><span>{asset[0].symbol}</span> ({asset[0].name})</Title>\r\n            <Link to=\"/\">\r\n                <Button className=\"currency-delete-btn\" type=\"primary\" icon={<CloseOutlined/>} />\r\n            </Link>\r\n            <Row gutter={[16, 16]}>\r\n                <Col span={24}>\r\n                    <Title level={5}>TRANSACTIONS</Title>\r\n                    <Card title=\"COINS\">\r\n                        {asset[0].transactions.length ? asset[0].transactions.map(tran => (\r\n                                <div key={tran.uuid} className=\"currency-transaction-item\">\r\n                                    <Statistic prefix={asset[0].symbol}\r\n                                               title={''}\r\n                                               value={`(${tran.coins}) -`}\r\n                                               suffix={`${tran.cost}`}/>\r\n                                    <Button type=\"primary\"\r\n                                            icon={<CloseOutlined/>}\r\n                                            onClick={() => showConfirm(tran.uuid)}/>\r\n                                </div>\r\n                            )) :\r\n                            <Title level={5}>You don't have a transaction yet. Create a transaction for {asset[0].name}\r\n                            </Title>}\r\n                    </Card>\r\n                    <Button color=\"red\"\r\n                            className=\"currency-transaction-btn\"\r\n                            onClick={() => setVisible(true)}>Add transaction</Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            <ModalTransaction visible={visible}\r\n                              onCreate={createTransaction}\r\n                              title={asset[0].name}\r\n                              onCancel={() => {\r\n                                  setVisible(false);\r\n                              }}/>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default memo(Currency);\r\n","import React, {useEffect} from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport {Cryptocurrencies, Currency, Header, Portfolio} from \"./components\";\nimport {portfolioActions} from \"./store/reducers/portfolioReducer\";\nimport {useActions} from \"./hooks/useActions\";\n\nfunction App() {\n    const {updateDataFromLS} = useActions(portfolioActions)\n\n    useEffect(() => {\n        updateDataFromLS()\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <Header/>\n            <main>\n                <Switch>\n                    <Route exact path=\"/\" render={() => <Portfolio/>}/>\n                    <Route exact path=\"/cryptocurrencies\" render={() => <Cryptocurrencies/>}/>\n                    <Route path=\"/currency/:tokenName\" render={() => <Currency/>}/>\n                </Switch>\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType, setAppError, setAppStatus} from \"../commonActions/appActions\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(setAppStatus, (state, action) => {\r\n            state.status = action.payload.status\r\n        })\r\n        builder.addCase(setAppError, (state, action) => {\r\n            state.error = action.payload.error\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n\r\n","import {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {portfolio} from \"./reducers/portfolioReducer\";\r\nimport {appReducer} from \"./reducers/appReducer\";\r\nimport { saveState } from '../services/localStorage/saveLocalStorage';\r\nimport {CryptoCurrencyListing} from \"../services/types\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния (редюсера)\r\nexport const rootReducer = combineReducers({\r\n    portfolio,\r\n    app: appReducer\r\n})\r\n\r\n// create our store use configureStore\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(thunk),\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n\r\n//TODO need refactoring #1\r\nlet oldTimeStamp = (Date.now()).valueOf()\r\nconst millisecondsBetween = 1000 // Each X milliseconds\r\nfunction updateLocalStorage(newState: CryptoCurrencyListing[])\r\n{\r\n    if (((Date.now()).valueOf() - oldTimeStamp) > millisecondsBetween) {\r\n        saveState(newState)\r\n        oldTimeStamp = (Date.now()).valueOf()\r\n    }\r\n}\r\n\r\nstore.subscribe(() => {\r\n    updateLocalStorage(store.getState().portfolio.portfolio)\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","import {CryptoCurrencyListing} from \"../types\";\r\n\r\nexport const saveState = (state: CryptoCurrencyListing[]) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('portfolio', serializedState);\r\n    } catch (e) {\r\n        console.log('save localStorage error', e)\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './glogal.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}